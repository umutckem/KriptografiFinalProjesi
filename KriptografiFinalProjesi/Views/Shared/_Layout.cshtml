<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Online Tools</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
    @RenderSection("Styles", required: false)
</head>
<body>
    <!-- 🌌 Arka plan partikül animasyonu -->
    <canvas id="bgCanvas"></canvas>

    <!-- 🖱️ Mor tıklama efekti -->
    <div class="click-effect-container" id="clickEffectContainer"></div>

    <header>
        <nav class="navbar navbar-expand-sm">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Online Tools</a>
                <div class="collapse navbar-collapse">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">Ana Sayfa</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Privacy">Gizlilik</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <div class="main-content">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="footer">
        <div class="container">
            © 2025 - RSA Kriptografi Aracı - <a asp-area="" asp-controller="Home" asp-action="Privacy">Gizlilik</a>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Tıklama efekti -->
    <script>
        document.addEventListener("click", function (e) {
            const container = document.getElementById("clickEffectContainer");
            const circle = document.createElement("div");
            circle.classList.add("click-circle");
            circle.style.left = `${e.clientX}px`;
            circle.style.top = `${e.clientY}px`;
            container.appendChild(circle);
            setTimeout(() => circle.remove(), 400);
        });
    </script>

    <!-- 🌠 Partikül + Çarpışma + Bağlantı çizgileri -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const canvas = document.getElementById("bgCanvas");
            if (!canvas.getContext) return;
            const ctx = canvas.getContext("2d");

            let particles = [];
            const particleCount = 90;
            const collisionDistance = 20;
            const connectionDistance = 100;

            class Particle {
                constructor() {
                    this.x = Math.random() * canvas.width;
                    this.y = Math.random() * canvas.height;
                    this.size = Math.random() * 3 + 1;
                    this.speedX = Math.random() * 1 - 0.5;
                    this.speedY = Math.random() * 1 - 0.5;
                    this.opacity = Math.random() * 0.3 + 0.3;
                }

                update() {
                    this.x += this.speedX;
                    this.y += this.speedY;

                    if (this.x <= 0 || this.x >= canvas.width) this.speedX *= -1;
                    if (this.y <= 0 || this.y >= canvas.height) this.speedY *= -1;

                    // Çarpışma kontrolü
                    for (let other of particles) {
                        if (other === this) continue;
                        const dx = this.x - other.x;
                        const dy = this.y - other.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);
                        if (distance < collisionDistance) {
                            this.speedX *= -1;
                            this.speedY *= -1;
                        }
                    }
                }

                draw() {
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                    ctx.fillStyle = `rgba(0, 191, 255, ${this.opacity})`;
                    ctx.shadowBlur = 6;
                    ctx.shadowColor = "#00bfff";
                    ctx.fill();
                    ctx.shadowBlur = 0;
                }
            }

            function drawConnections() {
                for (let i = 0; i < particles.length; i++) {
                    for (let j = i + 1; j < particles.length; j++) {
                        const dx = particles[i].x - particles[j].x;
                        const dy = particles[i].y - particles[j].y;
                        const dist = Math.sqrt(dx * dx + dy * dy);
                        if (dist < connectionDistance) {
                            const opacity = 1 - dist / connectionDistance;
                            ctx.beginPath();
                            ctx.moveTo(particles[i].x, particles[i].y);
                            ctx.lineTo(particles[j].x, particles[j].y);
                            ctx.strokeStyle = `rgba(0, 191, 255, ${opacity * 0.5})`;
                            ctx.lineWidth = 1;
                            ctx.stroke();
                        }
                    }
                }
            }

            function resizeCanvas() {
                canvas.width = window.innerWidth;
                canvas.height = Math.max(document.body.scrollHeight, window.innerHeight);
                particles = [];
                for (let i = 0; i < particleCount; i++) {
                    particles.push(new Particle());
                }
            }

            function animate() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                particles.forEach(p => {
                    p.update();
                    p.draw();
                });
                drawConnections();
                requestAnimationFrame(animate);
            }

            resizeCanvas();
            animate();
            window.addEventListener("resize", resizeCanvas);
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
